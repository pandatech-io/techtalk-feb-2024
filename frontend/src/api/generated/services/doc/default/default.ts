/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * ID Generator
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetIds200
} from '../../../models/doc'
import { request } from '../../../../client';
import type { ErrorType } from '../../../../client';



export const getIds = (
    
 signal?: AbortSignal
) => {
      
      
      return request<GetIds200>(
      {url: `/ids`, method: 'GET', signal
    },
      );
    }
  

export const getGetIdsQueryKey = () => {
    return [`/ids`] as const;
    }

    
export const getGetIdsQueryOptions = <TData = Awaited<ReturnType<typeof getIds>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIds>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIdsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIds>>> = ({ signal }) => getIds(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIds>>, TError, TData> & { queryKey: QueryKey }
}

export type GetIdsQueryResult = NonNullable<Awaited<ReturnType<typeof getIds>>>
export type GetIdsQueryError = ErrorType<unknown>

export const useGetIds = <TData = Awaited<ReturnType<typeof getIds>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIds>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetIdsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



